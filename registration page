// ignore_for_file: prefer_const_constructors, deprecated_member_use, sort_child_properties_last, prefer_is_not_empty, avoid_unnecessary_containers, unnecessary_import, use_key_in_widget_constructors, unused_import, sized_box_for_whitespace, prefer_const_literals_to_create_immutables, file_names, avoid_web_libraries_in_flutter, unused_label, dead_code, unused_local_variable, use_build_context_synchronously, camel_case_types, unnecessary_null_comparison, prefer_typing_uninitialized_variables, non_constant_identifier_names, no_leading_underscores_for_local_identifiers, unused_field, unnecessary_this, prefer_const_declarations

import 'dart:convert';
import 'dart:developer';
import 'dart:io';
//import 'dart:js';
//import 'package:js/js.dart';
//import 'package:exmpeeeee/pages/Profile_page.dart';
import 'package:exmpeeeee/pages/login_page.dart';
import 'package:exmpeeeee/pages/widgets/header_widget.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:font_awesome_flutter/font_awesome_flutter.dart';
import 'package:exmpeeeee/pages/rest/rest_api.dart';
import 'package:http/http.dart';
import 'package:image_picker/image_picker.dart';
import 'package:http/http.dart' as http;
import '../common/Theme_helper.dart';
import 'profile_page.dart';

class RegistrationPage extends StatefulWidget {
  @override
  State<StatefulWidget> createState() {
    return _RegistrationPageState();
  }
}

class _RegistrationPageState extends State<RegistrationPage> {
  //File? image;
  Future pickImage() async {
    final pickedImage =
        await ImagePicker().pickImage(source: ImageSource.gallery);
    if (pickedImage == null) return;
    final imageTemporary = File(pickedImage.path);
    File? image;
    setState(() {
      image = imageTemporary;
    });
  }

  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();
  bool checkedValue = false;
  bool checkboxValue = false;
  final TextEditingController imageController = TextEditingController();
  final TextEditingController firstnameController = TextEditingController();
  final TextEditingController lastnameController = TextEditingController();
  final TextEditingController usernameController = TextEditingController();
  final TextEditingController emailController = TextEditingController();
  final TextEditingController mobilenumberController = TextEditingController();
  final TextEditingController passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: SingleChildScrollView(
        child: Stack(
          children: [
            Container(
              height: 150,
              child: HeaderWidget(150, false, Icons.person_add_alt_1_rounded),
            ),
            Container(
              margin: EdgeInsets.fromLTRB(25, 50, 25, 10),
              padding: EdgeInsets.fromLTRB(10, 0, 10, 0),
              alignment: Alignment.center,
              child: Column(
                children: [
                  Form(
                    key: _formKey,
                    child: Column(
                      children: [
                        GestureDetector(
                          child: Stack(
                            children: [
                              Container(
                                height: 150,
                                width: 150,
                                padding: EdgeInsets.all(10),
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(100),
                                  border: Border.all(
                                    width: 7,
                                    color: Colors.black,
                                  ),
                                  color: Color.fromARGB(255, 236, 233, 233),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Color.fromARGB(31, 234, 225, 225),
                                      blurRadius: 30,
                                      offset: const Offset(5, 5),
                                    ),
                                  ],
                                ),
                              ),
                              Positioned(
                                  bottom: -20,
                                  left: -10,
                                  child: Container(
                                   
                                      padding: EdgeInsets.all(5),
                                      decoration: BoxDecoration(
                                        shape: BoxShape.circle,
                                        color: Colors.transparent,
                                      ),
                                      child: Center(
                                        child: IconButton(
                                          icon: Icon(
                                            Icons.add_a_photo,
                                            color: Colors.black,
                                            size: 25.0,
                                          ),
                                          onPressed: () {
                                            pickImage(); // Perform an action when the button is presse
                                          },
                                        ),
                                      )))

                              /*Icon(
                                    Icons.add_a_photo,
                                    color: Colors.black,
                                    size: 25.0,
                                  ),
                                    ),
                              ),
                              ElevatedButton(
                                onPressed: () {
                                  pickImage();
                                },
                                child: Text('Add Photo'),
                              )*/
                            ],
                          ),
                        ),
                        Text(
                          'Signup',
                          style: TextStyle(
                              fontSize: 60, fontWeight: FontWeight.normal),
                        ),
                        SizedBox(height: 10),
                        Container(
                          child: TextFormField(
                            controller: firstnameController,
                            decoration: ThemeHelper().textInputDecoration(
                              'First Name',
                              'Enter your first name',
                            ),
                          ),
                        ),
                        SizedBox(height: 10),
                        Container(
                          child: TextFormField(
                            controller: lastnameController,
                            decoration: ThemeHelper().textInputDecoration(
                              'Last Name',
                              'Enter your last name',
                            ),
                          ),
                        ),
                        SizedBox(height: 10.0),
                        Container(
                          child: TextFormField(
                            controller: usernameController,
                            decoration: ThemeHelper().textInputDecoration(
                              'User Name',
                              'Enter your user name',
                            ),
                          ),
                        ),
                        SizedBox(height: 10.0),
                        Container(
                          child: TextFormField(
                            controller: emailController,
                            decoration: ThemeHelper().textInputDecoration(
                              "E-mail address",
                              "Enter your email",
                            ),
                            keyboardType: TextInputType.emailAddress,
                            validator: (val) {
                              if (!(val!.isEmpty) &&
                                  !RegExp(r"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,253}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,253}[a-zA-Z0-9])?)*$")
                                      .hasMatch(val)) {
                                return "Enter a valid email address";
                              }
                              return null;
                            },
                          ),
                          decoration: ThemeHelper().inputBoxDecorationShaddow(),
                        ),
                        SizedBox(height: 10.0),
                        Container(
                          child: TextFormField(
                            controller: mobilenumberController,
                            decoration: ThemeHelper().textInputDecoration(
                              "Mobile Number",
                              "Enter your mobile number",
                            ),
                            keyboardType: TextInputType.phone,
                            validator: (val) {
                              if (!(val!.isEmpty) &&
                                  !RegExp(r"^(\d+)*$").hasMatch(val)) {
                                return "Enter a valid phone number";
                              }
                              return null;
                            },
                          ),
                          decoration: ThemeHelper().inputBoxDecorationShaddow(),
                        ),
                        SizedBox(height: 10.0),
                        Container(
                          child: TextFormField(
                            controller: passwordController,
                            obscureText: true,
                            decoration: ThemeHelper().textInputDecoration(
                              "Password*",
                              "Enter your password",
                            ),
                            validator: (val) {
                              if (val!.isEmpty) {
                                return "Please enter your password";
                              }
                              return null;
                            },
                          ),
                          decoration: ThemeHelper().inputBoxDecorationShaddow(),
                        ),
                        SizedBox(height: 15.0),
                        FormField<bool>(
                          builder: (state) {
                            return Column(
                              children: <Widget>[
                                Row(
                                  children: <Widget>[
                                    Checkbox(
                                      value: checkboxValue,
                                      onChanged: (value) {
                                        setState(() {
                                          checkboxValue = value!;
                                          state.didChange(value);
                                        });
                                      },
                                    ),
                                    Text(
                                      "I accept all terms and conditions.",
                                      style: TextStyle(color: Colors.grey),
                                    ),
                                  ],
                                ),
                                Container(
                                  alignment: Alignment.centerLeft,
                                  child: Text(
                                    state.errorText ?? '',
                                    textAlign: TextAlign.left,
                                    style: TextStyle(
                                      color: Theme.of(context).errorColor,
                                      fontSize: 12,
                                    ),
                                  ),
                                )
                              ],
                            );
                          },
                          validator: (value) {
                            if (!checkboxValue) {
                              return 'You need to accept terms and conditions';
                            } else {
                              return null;
                            }
                          },
                        ),
                        SizedBox(height: 0),
                        Container(
                          decoration:
                              ThemeHelper().buttonBoxDecoration(context),
                          child: ElevatedButton(
                            style: ThemeHelper().buttonStyle(),
                            child: Padding(
                              padding:
                                  const EdgeInsets.fromLTRB(40, 10, 40, 10),
                              child: Text(
                                "Register".toUpperCase(),
                                style: TextStyle(
                                  fontSize: 20,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                            onPressed: () async {
                              if (_formKey.currentState!.validate()) {
                                Map<String, dynamic> registerData = {
                                   'image': imageController.text,
                                  'firstname': firstnameController.text,
                                  'lastname': lastnameController.text,
                                  'username': usernameController.text,
                                  'email': emailController.text,
                                  'mobilenumber': mobilenumberController.text,
                                  'password': passwordController.text,
                                };
                                await doRegister(registerData);
                                Navigator.of(context).pushAndRemoveUntil(
                                  MaterialPageRoute( builder: (BuildContext context) => ProfilePage(userId:passengerId),
                                  ),
                                  (Route<dynamic> route) => false,
                                );
                              }
                            },
                          ),
                        ),
                        SizedBox(height: 10.0),
                        Text(
                          "Or create account using social media",
                          style: TextStyle(color: Colors.grey),
                        ),
                        SizedBox(height: 15.0),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            // todo: replace this by some thing like SocBtn()
                            SocBtn(
                                icon: FontAwesomeIcons.googlePlus,
                                color: Color(0xffEC2D2F),
                                msg: "Google Plus",
                                title: "You tap on GooglePlus social icon."),

                            SocBtn(
                                icon: FontAwesomeIcons.facebook,
                                color: Colors.blue,
                                msg: "FaceBook",
                                title: "You tap on GooglePlus social icon."),
                            // wach 7bab diri lèespace binathom lol its easyyaa hsbtli size omb tfkrt non
                            SocBtn(
                                icon: FontAwesomeIcons.twitter,
                                color: Color(0xff40ABF0),
                                msg: "twitter",
                                title: "You tap on twitter social icon."),
                          ],
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

buildButton({required title, required Future Function() onClicked}) {}

// todo: refactor this fun to `doRegister(Map<String, dynamic> data)`
//doRegister(String firstname, String lastname, String username, String email,
//  String mobilenumber, String password) async {
doRegister(Map<String, dynamic> data,BuildContext context) async {
  String image = data['image'];
  String firstname = data['firstname'];
  String lastname = data['lastname'];
  String username = data['username'];
  String email = data['email'];
  String mobilenumber = data['mobilenumber'];
  String password = data['password'];
  log('=====================');
  log('image : $image');
  log('firstname : $firstname');
  log('lastname : $lastname');
  log('username : $username');
  log('email : $email');
  log('mobilenumber : $mobilenumber');
  log('password: $password');
  var res = await passengerRegister(
      image, firstname, lastname, username, email, mobilenumber, password);
  log(res);
  log('=====================');

  if (res['success']) {
     int passengerId = res['passengerId'];
    Navigator.pushReplacement(
      context,
        MaterialPageRoute(builder: (context) => ProfilePage(userId:passengerId))); 
  } else {
    Fluttertoast.showToast(msg: 'Try again ?', textColor: Colors.red);
  }
}

class SocBtn extends StatefulWidget {
  const SocBtn(
      {super.key,
      required this.icon,
      required this.color,
      required this.msg,
      required this.title});
  final IconData icon;
  final Color color;
  final String title, msg;

  @override
  State<SocBtn> createState() => _SocBtnState();
}

class _SocBtnState extends State<SocBtn> {
  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 18),
      child: GestureDetector(
          child: FaIcon(
            widget.icon,
            size: 35,
            color: widget.color,
          ),
          onTap: () {
            showDialog(
              context: context,
              builder: (BuildContext context) {
                return ThemeHelper().alartDialog(
                  widget.title,
                  widget.msg,
                  context,
                );
              },
            );
          }),
    );
  }
}

Map<String, dynamic> registerData = {
  'image': 'image',
  'firstname': 'firstname',
  'lastname': 'lastname',
  'username': 'username',
  'email': 'exemple@example.com',
  'mobilenumber': '1234567890',
  'password': 'password',
};
print(registerData) {
  throw UnimplementedError();
}

Future<void> sendVerificationCode(String email, String phoneNumber) async {
  final url =
      'YOUR_BACKEND_URL/sendVerificationCode'; // Replace with your backend URL ki tkamli f node oui

  try {
    final response = await http.post(
      Uri.parse(url),
      body: json.encode({'email': email, 'phone': phoneNumber}),
      headers: {'Content-Type': 'application/json'},
    );

    if (response.statusCode == 200) {
      print('Verification code sent successfully');
    } else {
      print('Failed to send verification code');
    }
  } catch (error) {
    print('Error sending verification code: $error');
  }
}

Future<bool> verifyCode(String code) async {
  final url = 'YOUR_BACKEND_URL/verifyCode'; // Replace with your backend URL

  try {
    final response = await http.post(
      Uri.parse(url),
      body: json.encode({'code': code}),
      headers: {'Content-Type': 'application/json'},
    );

    if (response.statusCode == 200) {
      final responseData = json.decode(response.body);
      return responseData['valid'] ?? false;
    } else {
      print('Failed to verify code');
      return false;
    }
  } catch (error) {
    print('Error verifying code: $error');
    return false;
  }
}
